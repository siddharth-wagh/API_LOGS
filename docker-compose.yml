version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      SERVICE_NAME: frontend
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
    depends_on:
      service-a:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - app-network
  service-a:
    build: ./service-a
    ports:
      - "4000:4000"
    environment:
      SERVICE_NAME: service-a
      SERVICE_B_URL: http://service-b:5000
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
    depends_on:
      service-b:
        condition: service_started
      otel-collector:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/start"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  service-b:
    build: ./service-b
    ports:
      - "5000:5000"
    environment:
      SERVICE_NAME: service-b
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
    depends_on:
      - otel-collector
    networks:
      - app-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    volumes:
      - ./otel-collector/config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4318:4318" # OTLP HTTP
      - "4317:4317" # OTLP gRPC
      - "13133:13133" # Health check
    depends_on:
      - jaeger
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "/otelcol", "--config=/etc/otel-collector-config.yaml", "--version"]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 15s

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Jaeger OTLP receiver
    networks:
      - app-network

  test-runner:
    build:
      context: ./test-runner
    depends_on:
      service-a:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
