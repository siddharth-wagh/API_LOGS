version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      SERVICE_NAME: frontend
      OTEL_EXPORTER_OTLP_ENDPOINT: http://agent-collector:4318
    depends_on:
      service-a:
        condition: service_healthy
      agent-collector:
        condition: service_started
    networks:
      - app-network
  service-a:
    build: ./service-a
    ports:
      - "4000:4000"
    environment:
      SERVICE_NAME: service-a
      SERVICE_B_URL: http://service-b:5000
      OTEL_EXPORTER_OTLP_ENDPOINT: http://agent-collector:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV:-production}
      CLOUD_PROVIDER: ${CLOUD_PROVIDER:-aws}
    depends_on:
      service-b:
        condition: service_started
      agent-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/start"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  service-b:
    build: ./service-b
    ports:
      - "5000:5000"
    environment:
      SERVICE_NAME: service-b
      OTEL_EXPORTER_OTLP_ENDPOINT: http://agent-collector:4318
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV:-production}
      CLOUD_PROVIDER: ${CLOUD_PROVIDER:-aws}
    depends_on:
      - agent-collector
    networks:
      - app-network

  agent-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector/config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    environment:
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV:-production}
      CLOUD_PROVIDER: ${CLOUD_PROVIDER:-aws}
    ports:
      - "4318:4318" # OTLP HTTP
      - "4317:4317" # OTLP gRPC
      - "13133:13133" # Health check
      - "1777:1777" # pprof extension
      - "55679:55679" # zpages extension
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 15s
    networks:
      - app-network

  gateway-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector/gateway-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    environment:
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV:-production}
      CLOUD_PROVIDER: ${CLOUD_PROVIDER:-aws}
    ports:
      - "4319:4318" # OTLP HTTP
      - "4327:4317" # OTLP gRPC
      - "13134:13133" # Health check
      - "1778:1777" # pprof extension
      - "55680:55679" # zpages extension
    depends_on:
      - jaeger
      - elasticsearch
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 15s

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Jaeger OTLP receiver
    networks:
      - app-network

  test-runner:
    build:
      context: ./test-runner
    depends_on:
      service-a:
        condition: service_healthy
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - app-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "9600:9600"
      - "8086:8086"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - app-network
    depends_on:
      - elasticsearch

networks:
  app-network:
    driver: bridge

volumes:
  elasticsearch_data:
